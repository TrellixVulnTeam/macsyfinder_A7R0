#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Nov 5, 2012

@author: bneron
@contact: bneron@pasteur.fr
@organization: Institut Pasteur
@license: license
"""
import sys
import os
import argparse
import logging

if 'TXSSCAN_HOME' in os.environ:
    TXSSCAN_HOME = os.environ.get('TXSSCAN_HOME')
    TXSSCAN_HOME = os.path.abspath( os.path.realpath(TXSSCAN_HOME))
    if TXSSCAN_HOME not in sys.path:
        sys.path.append( TXSSCAN_HOME )
try:
    from txsscanlib.config import Config
except ImportError , err:
    msg = "cannot import txsscanlib, check your installation or your TXSSCAN_HOME variable : {0!s}".format( err )
    sys.exit( msg )

from operator import attrgetter # To be used with "sorted"
from txsscanlib.system_parser import SystemParser
from txsscanlib.search_genes import search_genes
from txsscanlib.database import Indexes
from txsscanlib.search_systems import search_systems
from txsscanlib.system import system_bank
from txsscanlib.gene import gene_bank

parser = argparse.ArgumentParser(description=" Txsscan is a tool for the detection of protein secretion systems in diderm bacteria.\nIt also provides a framework fully parametrizable with a dedicated syntax to implement the detection of new systems (function units encoded by one or more genes, contiguous or not in genomes) for which Hmmer protein profiles are available. ")

parser.add_argument("systems",
                    nargs = '+',
                    help = "aide a définir")
genome_options =  parser.add_argument_group(title = "genome options")
genome_options.add_argument("--sequence_db",
                    action = 'store',
                    dest = 'sequence_db',
                    help = "aide a définir")
genome_options.add_argument(  "--db_type" ,
                       choices = ['unordered_replicon', 'ordered_replicon', 'gembase', 'unordered'],
                       dest = "db_type",
                       default = None,
                       help = 'the genes are ordered')
genome_options.add_argument(  "--replicon_topology" ,
                       choices = ['linear', 'circular'],
                       dest = "replicon_topology",
                       default = None,
                       help = "the topology of the replicons (this option is meaningful only if the db_type is 'ordered_replicon' or 'gembase'")
genome_options.add_argument(  "--topology-file" ,
                       dest = "topology-file",
                       default = None,
                       help = "the topology file allow to specify a topology (linear or circular) for each replicon (this option is meaningful only if the db_type is 'ordered_replicon' or 'gembase'")
genome_options.add_argument(  "--idx" ,
                       action = 'store_true',
                       dest = "build_indexes",
                       default = False,
                       help = "force to build the indexes even there are presents (default = False)")

system_options =  parser.add_argument_group(title = "system options")
system_options.add_argument( "--inter-gene-max-space",
                             action = 'append',
                             nargs = 2,
                             dest = 'inter_gene_max_space',
                             default = None,
                             help = "maximum space between 2 genes, the fisrt value must match to a system the second value to an interval,\
                              this option can appear multiple times: --inter-gene-max-space T2SS 32 --inter-gene-max-space Flagellum 200"
                             )
system_options.add_argument( "--min-mandatory-genes-required",
                             action = 'append',
                             nargs = 2,
                             dest = 'min_mandatory_genes_required',
                             default = None,
                             help = "the mandatory genes quorum for the system, the fisrt value must match to a system the second value to an integer,\
                              this option can appear multiple times: --min-mandatory-genes-required T2SS 15 --min-mandatory-genes-required Flagellum 10"
                             )
system_options.add_argument( "--min-genes-required",
                             action = 'append',
                             nargs = 2,
                             dest = 'min_genes_required',
                             default = None,
                             help = "the genes quorum for the system, the fisrt value must match to a system the second value to an integer,\
                              this option can appear multiple times: --min-genes-required T2SS 15 --min-genes-required Flagellum 10"
                             )
hmmer_options =  parser.add_argument_group(title = "hmmer options")
hmmer_options.add_argument( '--hmmer', 
                            action = 'store',
                            dest = 'hmmer_exe',
                            default = None, 
                            help = 'hmm binary')
hmmer_options.add_argument( '--e_value_search',
                     action = 'store',
                     dest = 'e_value_res',
                     type = float,
                     default = None,
                     help = 'help for e_value_res')

hmmer_options.add_argument('--i_evalue_select',
                     action = 'store',
                    dest = 'i_evalue_sel',
                    type = float,
                    default = None , 
                    help = 'help for i_evalue_select')

hmmer_options.add_argument('--coverage_profile',
                     action = 'store',
                    dest = 'coverage_profile',
                    type = float,
                    default = None , 
                    help = 'help for coverage_profile')

dir_options =  parser.add_argument_group(title = "directories options", description = None)
dir_options.add_argument('-d', '--d',
                    action = 'store',
                    dest = 'def_dir',
                    default = None,
                    help = 'the path to the systems definition files')
dir_options.add_argument('-r', '--research-search',
                    action = 'store',
                    dest = 'res_search_dir',
                    default = None,
                    help = 'aide a définir')
dir_options.add_argument( '--research-search-suffix',
                    action = 'store',
                    dest = 'res_search_suffix',
                    default = None,
                    help = 'aide a définir')
dir_options.add_argument('--research-extract-suffix',
                    action = 'store',
                    dest = 'res_extract_suffix',
                    default = None,
                    help = 'aide a définir')
dir_options.add_argument('-p', '--profile_dir',
                    action = 'store',
                    dest = 'profile_dir',
                    default = None,
                    help = 'the path to the profiles directory')
dir_options.add_argument('--profile-suffix',
                    action = 'store',
                    dest = 'profile_suffix',
                    default = None,
                    help = 'the suffix of profile files')

general_options =  parser.add_argument_group(title = "general options", description = "general options")
general_options.add_argument("-w", "--worker",
                    action = 'store',
                    dest = 'worker_nb',
                    type = int,
                    default = None,
                    help = "number of worker not yet implemented")
general_options.add_argument( "-v" , "--verbosity",
                      action= "count",
                      dest = "verbosity",
                      default = 0,
                      help = "increase the verbosity level. There is 4 levels: Error messages (default), Warning (-v), Info (-vv) and Debug.(-vvv)") 
general_options.add_argument("--log",
                    action = 'store',
                    dest = 'log_file',
                    default = None,
                    help = "the path to log file")
general_options.add_argument("--config",
                    action = 'store',
                    dest = 'cfg_file',
                    default = None,
                    help = "the path to a txsscan file to use")
general_options.add_argument("--previous-run",
                    action = 'store',
                    dest = 'previous_run',
                    default = None,
                    help = """path to a previous run. Skip the step of hmmsearch. 
(conflict with options  --cfg-file, --sequence_db, --profile_suffix, --res_extract_suffix, 
--e_value_res, --db_type, --hmmer_exe)""")

args = parser.parse_args()
if args.previous_run and (args.cfg_file or
                          args.sequence_db or
                          args.profile_suffix or
                          args.profile_dir or
                          args.res_extract_suffix or
                          args.e_value_res or
                          args.db_type or
                          args.hmmer_exe):
    parser.error(""" --previous-run confict with --cfg-file, --sequence_db, --profile_suffix, --res_extract_suffix, --e_value_res, --db_type, --hmmer_exe""")

sh_formatter = logging.Formatter("%(levelname)-8s : L %(lineno)d : %(message)s")
sh = logging.StreamHandler(sys.stderr)
sh.setFormatter(sh_formatter)

if args.verbosity == 0:
    log_level = None
elif args.verbosity == 1:
    log_level = logging.WARNING
elif args.verbosity == 2:
    log_level = logging.INFO
elif args.verbosity == 3:
    log_level = logging.DEBUG

config = Config(previous_run = args.previous_run,
                cfg_file = args.cfg_file,
                sequence_db = args.sequence_db,
                db_type = args.db_type,
                build_indexes = args.build_indexes,
                replicon_topology = args.replicon_topology,
                inter_gene_max_space = args.inter_gene_max_space,
                min_mandatory_genes_required = args.min_mandatory_genes_required,
                min_genes_required = args.min_genes_required,
                hmmer_exe = args.hmmer_exe,
                e_value_res = args.e_value_res,
                i_evalue_sel = args.i_evalue_sel,
                coverage_profile = args.coverage_profile,
                res_search_dir = args.res_search_dir,
                res_search_suffix = args.res_search_suffix,
                profile_dir = args.profile_dir,
                profile_suffix = args.profile_suffix,
                res_extract_suffix = args.res_extract_suffix,
                log_level = log_level,
                log_file = args.log_file,
                worker_nb = args.worker_nb
                )
logger = logging.getLogger('txsscan')
config.save(config.working_dir)

#build indexes
idx = Indexes(config)
idx.build(force = config.build_indexes)

parser = SystemParser(config, system_bank, gene_bank)
if ('all' or 'All' or 'ALL') in args.systems:
#if 'all' in args.systems:
    import glob
    systems_name_to_detect = glob.glob( os.path.join(config.def_dir, '*.xml'))
    #systems_to_detect = [ os.path.basename(s) for s in systems_to_detect]
    systems_name_to_detect = [ os.path.basename(s)[:-4] for s in systems_name_to_detect]
else:
    systems_name_to_detect = args.systems
parser.parse(systems_name_to_detect)

systems_to_detect = [ system_bank[system_name] for system_name  in systems_name_to_detect]
all_genes = []
for system in systems_to_detect:
    genes = system.mandatory_genes + system.allowed_genes + system.forbidden_genes
    all_genes += genes
all_reports = search_genes(all_genes, config)
all_hits = [hit for subl in [report.hits for report in all_reports ] for hit in subl]

if len(all_hits)> 0:
    all_hits=sorted(all_hits, key=attrgetter('score'), reverse=True)
    all_hits=sorted(all_hits, key=attrgetter('replicon_name', 'position'))

    systems_to_detect=sorted(systems_to_detect, key=attrgetter('name'))
    search_systems(all_hits, systems_to_detect, config)
else:
    logger.info("No hit found in this dataset.")
logger.debug("FIN")
